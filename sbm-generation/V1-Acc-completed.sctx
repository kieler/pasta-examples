#hostcode-java "import ev3dev.actuators.lego.motors.EV3LargeRegulatedMotor;
                import ev3dev.sensors.ev3.EV3UltrasonicSensor;
                import lejos.hardware.port.MotorPort;
                import lejos.robotics.SampleProvider;
                import lejos.hardware.port.SensorPort;"

scchart Acc2 {

    host class "EV3LargeRegulatedMotor" {
        void forward()
        void setSpeed(int speed)
        int getSpeed()
    } 
    motorLeft = `new EV3LargeRegulatedMotor(MotorPort.B);`,
    motorRight = `new EV3LargeRegulatedMotor(MotorPort.C);`

    host class "SampleProvider" {
        void fetchSample(float sample[1], int offset)
        int sampleSize()
    } sp = `(new EV3UltrasonicSensor(SensorPort.S4)).getDistanceMode();`

    // FIXME should not be neccessary
    float sample[1] = {sp.sampleSize()}
    int newSpeed
    during do sp.fetchSample(sample, 0)
    during do motorLeft.setSpeed(newSpeed);
        motorRight.setSpeed(newSpeed);
        motorLeft.forward();
        motorRight.forward()

    dataflow {
        int distance
        int currentSpeed
        int safeDistance = 7
        int minDistance = 7

        ref SBM_Controller2 controller

        // Sense
        currentSpeed = motorLeft.getSpeed()
        // FIXME may work on als/master
        //sp.fetchSample(&sample, 0)
        distance = sample[0]
        safeDistance = (currentSpeed < 25) ? minDistance : (currentSpeed / 25)

        // Control
        controller.distance = distance
        controller.currentSpeed = currentSpeed
        controller.safeDistance = safeDistance
        controller.minDistance = minDistance

        // Actuate
        newSpeed = controller.newSpeed
        // FIXME may work on als/master
        //motorLeft.setSpeed(motorSpeed)
        //motorRight.setSpeed(motorSpeed)
        //motorLeft.forward()
        //motorRight.forward()
    }


}

scchart SBM_Controller2 {

enum Controller {accelerate, decelerate, stop, NULL}
input int distance
input int minDistance
input int safeDistance
ref Controller controlAction


input int currentSpeed
output int newSpeed

initial state NoAction {
}
if distance>=minDistance && distance<=safeDistance go to decelerate_distanceGreaterOrEqualTominDistanceAnddistanceLessOrEqualTosafeDistance
if distance>=safeDistance go to accelerate_distanceGreaterOrEqualTosafeDistance
if distance<=minDistance go to stop

state stop {
entry do newSpeed = 0
}
if distance>=minDistance && distance<=safeDistance go to decelerate_distanceGreaterOrEqualTominDistanceAnddistanceLessOrEqualTosafeDistance
if distance>=safeDistance go to accelerate_distanceGreaterOrEqualTosafeDistance

state accelerate_distanceGreaterOrEqualTosafeDistance "accelerate (distance>=safeDistance)" {
entry do newSpeed = currentSpeed + 5
}
if distance>=minDistance && distance<=safeDistance go to decelerate_distanceGreaterOrEqualTominDistanceAnddistanceLessOrEqualTosafeDistance
if distance<=minDistance go to stop
if distance==safeDistance go to NoAction
if !(distance>=safeDistance) go to NoAction

state decelerate_distanceGreaterOrEqualTominDistanceAnddistanceLessOrEqualTosafeDistance "decelerate (distance>=minDistance && distance<=safeDistance)" {
entry do newSpeed = currentSpeed - 5
}
if distance>=safeDistance && !(distance>=minDistance && distance<=safeDistance) go to accelerate_distanceGreaterOrEqualTosafeDistance
if distance<=minDistance && !(distance>=minDistance && distance<=safeDistance) go to stop

}